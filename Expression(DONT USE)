//I REVAMPED THE CONSTRUCTOR AND WROTE TOSTRING AND EQUALS METHODS AND IT SHOULD SUPPORT TILDES, HADN'T FOUND A PROBLEM SO FAR -Terry

//Also, tildes on variables are placed in myItem (ex: "~a"), 
//while tildes on expressions [ex: "~(a=>b)"] will set the isTilde boolean to TRUE, and the code handles it. 
//-Terry

public class Expression3 {
	
	public ExprNode myRoot;
	public String expression;

	public Expression3(){// throws IllegalLineException{
		myRoot = null;
		expression = "";
	}
	
	public Expression3(String s){// throws IllegalLineException {
		if(isLegal(s)){
			expression = s;
			myRoot = new ExprNode(s);
		}
	}
	
	public static boolean equals(Expression3 a, Expression3 b) {
		return a.myRoot.equals(b.myRoot);
	}
	
	public static boolean isLegal(String s){
		return true;
	}

	
	public String toString() {
		return expression;
	}
	
	public String value() {
		return myRoot.myItem;
	}
	
	public String valueLeft() {
		return myRoot.myLeft.myItem;
	}
	
	public String valueRight() {
		return myRoot.myLeft.myItem;
	}
	
	public static boolean andorChecker(String s) {
		if (s == null) {
			return false;
		}
		if (s.length() < 5) {
			for (int i = 0; i < s.length(); i++) {
				if (s.charAt(i) == '&' || s.charAt(i) == '|') {
					return false;
				}
			}
		}
		int parenCounter = 0;
		int andorCounter = 0;
		for(int i = 0; i<s.length(); i++){
			if(s.charAt(i) == '('){
				parenCounter++;
				andorCounter--;
			}
			if(s.charAt(i) == ')'){
				parenCounter--;
				andorCounter++;
			}
			if(s.charAt(i) == '&'){
				andorCounter++;
			}
			if(s.charAt(i) == '|'){
				andorCounter++;
			}
			if (andorCounter > 1) {
				return false;
			}
			if(parenCounter == 0){

			}
		}
		return true;
	}
	
	
	private static class ExprNode{ //subclass
		private String myItem;
		private boolean isTilde = false;
		private ExprNode myLeft;
		private ExprNode myRight;
		
		public ExprNode(){
			myItem = null;
			myLeft = null;
			myRight = null;
			isTilde = false;
		}
		
		public ExprNode(String s){
			if(s.length()==0){
				myItem = "";
			}
			if(s.length()==1 && !s.equals("~")){
				myItem = s;
			}
			if(s.length()==2 && s.charAt(0) == '~'){
				myItem = s;
			}
			if (s.length()>1 && s.charAt(0) != '~') {
				myItem = findSymbol(s);
				if (myItem.charAt(0) == '~') {
					isTilde = true;
				}
				myLeft = new ExprNode(findLeft(s)); 
				myRight = new ExprNode(findRight(s));
			}
			
			if (s.length()>2 && s.charAt(0) == '~') {
				isTilde = true;
				String s2 = s.substring(1, s.length());
				myItem = findSymbol(s2);
				myLeft = new ExprNode(findLeft(s2)); 
				myRight = new ExprNode(findRight(s2));
			}
		}
		
		public ExprNode(String s, ExprNode left, ExprNode right){
			myItem =s;
			myLeft = left;
			myRight = right;
		}
		
		public String findSymbol(String s){
			if(s.length()==0){
				return "";
			}
			if(s.length()==1 && !s.equals("~")){
				return s;
			}
			if(s.length()==2 && s.charAt(0) == '~'){
				return s;
			}
			int parenCounter = 0;
			for(int i = 1; i<s.length()-1; i++){
				if(s.charAt(i) == '('){
					parenCounter++;
				}
				if(s.charAt(i) == ')'){
					parenCounter--;
				}
				if(parenCounter == 0){
					if((""+s.charAt(i)+s.charAt(i+1)).equals("=>")){
						return ""+s.charAt(i)+s.charAt(i+1);
					}
					if (s.charAt(i) == '&') {
						return ""+s.charAt(i);
					}
					if (s.charAt(i) == '|') {
						return ""+s.charAt(i);
					}
				}
			}
			return "";
		}
		
		public String findLeft(String s){
			if(s.length()==0){
				return "";
			}
			if(s.length()==1){
				return s;
			}
			int parenCounter = 0;
			for(int i = 1; i<s.length()-1; i++){
				
				if(s.charAt(i) == '('){
					parenCounter++;
				}
				if(s.charAt(i) == ')'){
					parenCounter--;
				}
				if(parenCounter == 0){
					if((""+s.charAt(i)+s.charAt(i+1)).equals("=>")){
						return s.substring(1, i);
					}
					if (s.charAt(i) == '&') {
						return s.substring(1, i);
					}
					if (s.charAt(i) == '|') {
						return s.substring(1, i);
					}
				}
			}
			return "";
		}
		
		public String findRight(String s){
			if(s.length()==0){
				return "";
			}
			if(s.length()==1){
				return s;
			}
			int parenCounter = 0;
			for(int i = 1; i<s.length(); i++){
				if(s.charAt(i) == '('){
					parenCounter++;
				}
				if(s.charAt(i) == ')'){
					parenCounter--;
				}
				if(parenCounter == 0){
					if((""+s.charAt(i)+s.charAt(i+1)).equals("=>")){
						return s.substring(i+2, s.length()-1);
					}
					if (s.charAt(i) == '&') {
						return s.substring(i+1, s.length()-1);
					}
					if (s.charAt(i) == '|') {
						return s.substring(i+1, s.length()-1);
					}
				}
			}
			return "";
		}
		
		protected boolean equals(ExprNode node){
			if (!myItem.equals(node.myItem)) {
				return false;
			}
			if (isTilde != (node.isTilde)) {
				return false;
			}
			if (myLeft == null && node.myLeft != null) {
				return false;
			}
			if (myLeft != null && node.myLeft == null) {
				return false;
			}
			if (myRight == null && node.myRight != null) {
				return false;
			}
			if (myRight != null && node.myRight == null) {
				return false;
			}
			if (myLeft != null && node.myLeft != null) {
				if (!myLeft.equals(node.myLeft)) {
					return false;
				}
			}
			if (myRight != null && node.myRight != null) {
				if (!myRight.equals(node.myRight)) {
					return false;
				}
			}
			return true;
		}
		


		/*
		public String toString() {
			String rtn = "(";
			if (myLeft != null) {
				rtn = rtn + myLeft.toStringHelper();
			}
			if (isTilde == true) {
				rtn = rtn + "~";
			}
			rtn = rtn + myItem; 
			if (myRight != null) {
				rtn = rtn + myRight.toStringHelper();
			}
			rtn = rtn + ")";
			return rtn;
		}
		
		public String toStringHelper() {
			if (myLeft == null && myRight == null) {
				return myItem;
			}
			String rtn = "(";
			if (myLeft != null) {
				rtn = rtn + myLeft.toStringHelper();
			}
			if (isTilde == true) {
				rtn = rtn + "~";
			}
			rtn = rtn + myItem; 
			if (myRight != null) {
				rtn = rtn + myRight.toStringHelper();
			}
			rtn = rtn + ")";
			return rtn;
		}
		*/

	}
	public static void main(String[] args){
		String b ="((x&y)=>z)";
		String c ="((a=>b)=>c)";
		Expression3 none = new Expression3();
		Expression3 aa = new Expression3("(a=>b)");
		//System.out.println(aa.myRoot.myItem);
		//System.out.println(aa.myRoot.myLeft.myItem);
		//System.out.println(aa.myRoot.myRight.myItem);
		//System.out.println(none.equals(aa));
		Expression3 tt = new Expression3(b);
		//System.out.println(tt.myRoot.myItem);
		//System.out.println(tt.myRoot.myLeft.myItem);
		//System.out.println(tt.myRoot.myLeft.myLeft.myItem);
		//System.out.println(tt.myRoot.myLeft.myRight.myItem);
		//System.out.println(tt.myRoot.myRight.myItem);
		Expression3 cc = new Expression3(c);
		//System.out.println(aa.myRoot.equals(cc.myRoot.myLeft));
		
		Expression3 testExp1 = new Expression3("((a=>(b|c))=>((d&e)|f))");
		Expression3 testExp2 = new Expression3("(((a=>(b|c))=>((d&e)|f))=>z)");
		System.out.println(testExp1.myRoot.equals(testExp2.myRoot));
		System.out.println(testExp1.myRoot.equals(testExp2.myRoot.myLeft));
		System.out.println(testExp2.toString());
		
		Expression3 tilde1 = new Expression3("~p");
		Expression3 tilde2 = new Expression3("(~p=>~q)");
		Expression3 tilde3 = new Expression3("~(p=>q)");
		Expression3 tilde4 = new Expression3("(~(~p=>~q)=>~(~(~z&~x)=>~x))");
		Expression3 tilde5 = new Expression3("~(a=>(~(~p=>~q)=>~(~(~z&~x)=>~x)))");
		System.out.println(tilde1.myRoot.myItem);
		System.out.println(tilde2.myRoot.myItem);
		System.out.println(tilde2.myRoot.myLeft.myItem);
		System.out.println(tilde2.myRoot.myRight.myItem);
		System.out.println(tilde3.myRoot.myItem);
		System.out.println(tilde3.myRoot.myLeft.myItem);
		System.out.println(tilde3.myRoot.myRight.myItem);
		System.out.println(tilde3.myRoot.isTilde);
		System.out.println(tilde4.myRoot.myItem);
		System.out.println(tilde4.myRoot.myLeft.myItem);
		System.out.println(tilde4.myRoot.myRight.myItem);
		System.out.println(tilde4.myRoot.isTilde);
		System.out.println(tilde4.myRoot.myRight.isTilde);
		System.out.println(tilde4.myRoot.myLeft.isTilde);
		System.out.println(tilde4.myRoot.equals(tilde5.myRoot.myRight));
		System.out.println(tilde1.toString());
		System.out.println(tilde2.toString());
		System.out.println(tilde3.toString());
		System.out.println(tilde4.toString());
		System.out.println(tilde5.toString());
		System.out.println("");
		System.out.println(andorChecker("(a&b)"));
		System.out.println(andorChecker("(a&b&c)"));
	}
}
