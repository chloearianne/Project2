package proj2;
public class Expression {

	public ExprNode myRoot;
	public String expression;
	
	/* Expression objects are essentially trees. The String input from the constructor
	 * will be transformed into a tree with its leaves being lower-case letters.
	 * PRECONDITION: valid String type of input.
	 * POSTCODITION: A tree is made out of the String input, and throws an error if not syntactically valid
	 * In addition, the instance variable "expression" will keep a valid String representation of the expression 
	 * for the toString method
	 */

	public Expression(String s) throws IllegalLineException {
		expression = s;
		try{
			myRoot = new ExprNode(s);
		} catch(IllegalLineException e) {
			throw new IllegalLineException(e.getMessage());
		}
	}



	public String toString() {
		return expression;
	}	


	/* 
	 * This is the subclass, for the nodes of expression. Each node contains a myItem, myLeft, and myRight.
	 * 
	 */

	public static class ExprNode{ //subclass
		private String myItem;
		private ExprNode myLeft;
		private ExprNode myRight;

		public ExprNode(){ //blank expression
			myItem = null;
			myLeft = null;
			myRight = null;
		}
		
		
		/*
		 * ExprNode takes in a String. It finds the center symbol, and sets that to my item, while
		 * calling a recusive call to myLeft and myRight for their symbols. This process continues 
		 * until a tree is made.
		 */
		
		public ExprNode(String s) throws IllegalLineException{
			if(s.length()==0){ //null String
				throw new IllegalLineException("Expression should not be null.");
			}
			if(s.length()==1){ //length 1 can only be a lower-case letter
				if(s.matches("[a-z]")){ //lower-case
					myItem = s;
					myLeft = null;
					myRight = null;
					return;
				} else {
					throw new IllegalLineException("Invalid Character Use");
				}	
			}
			if(s.charAt(0) == '~' && (s.length() > 1)){
				myItem = "~";
				try{
					myLeft = new ExprNode(s.substring(1)); //recursive call after first tilde
				} catch (IllegalLineException e){
					throw new IllegalLineException(e.getMessage());
				}
				
				return;
			} 
			if (s.charAt(0) == '(' && s.charAt(s.length() - 1) == ')') { //has parentheses at both ends
				try{
					String[] sym = findSymbol(s); //contains string version of index of the symbol found, and a String version of that symbol
					myItem = sym[1]; //the symbol
					myLeft = new ExprNode(s.substring(1, Integer.parseInt(sym[0]))); // 1 to index
					if(sym[1].equals("=>")){ //specials, needs 2 index
						myRight = new ExprNode(s.substring(Integer.parseInt(sym[0])+2, s.length()-1)); //index +2 to get after the '=>'
					} else{
						myRight = new ExprNode(s.substring(Integer.parseInt(sym[0])+1, s.length()-1));
					}
				} catch (IllegalLineException e) {
					throw new IllegalLineException(e.getMessage());
				}
				
				return;
			}
			throw new IllegalLineException("Your line is just wrong, fix it before you try again, thanks and have a nice day.");
			
		}
		
		public String getMyItem(){ //getter for myItem
			return myItem;
		}
		
		public ExprNode getMyLeft(){ //getter for myLeft
			return myLeft;
		}	
		
		public ExprNode getMyRight(){ //getter for myRight
			return myRight;
		}	

		
		/*
		 * FindSymbol take in a string and finds either a |,&,=> that will function 
		 * as the node's myItem. This is done through a process of parenthesis checking,
		 * where a parenCounter is kept; +1 for '(', and -1 for ')', starting after the
		 * first parentheses if there is one. If at any time the parenCounter is 0, meaning either 
		 * a closed parentheses (), or a single character. It then return a String[] with the index
		 * of the symbol, and which symbol it is.
		 * 
		 */
		
		public String[] findSymbol(String s) throws IllegalLineException{
			int parenCounter = 0;
			for(int i = 1; i<s.length()-1; i++){
				if(s.charAt(i) == '('){
					parenCounter++;
				}
				if(s.charAt(i) == ')'){
					parenCounter--;
				}
				if(parenCounter == 0){ //parens have closed up for the first time, so Ima check the next index for a symbol
					if (s.charAt(i) == '~') { // test for multiple '~'
						continue;
					}
					if (s.charAt(i+1) == '&') { //if &
						return new String[] {(i+1)+"", "&"};
					}
					if(s.charAt(i+1) == '|'){ //if |
						return new String[] {(i+1)+"", "|"};
					}
					if((i+2<s.length()-1) && (""+s.charAt(i+1)+s.charAt(i+2)).equals("=>")){ //if the next two are = and >
						return new String[] {(i+1)+"", "=>"};
					}
				} else if (parenCounter < 0){ //should never be negative, meaning more closed than open parentheses
					throw new IllegalLineException("Incorrect parentheses use.");
				}
			}
			throw new IllegalLineException("No {|, &, =>} found.");
		}
		

		public boolean equals(ExprNode node){
			if (!myItem.equals(node.myItem)) { //items not equal
				return false;
			}
			if (myLeft == null && node.myLeft != null) { //lefts not equal
				return false;
			}
			if (myLeft != null && node.myLeft == null) { 
				return false;
			}
			if (myLeft != null && node.myLeft != null) {
				if (!myLeft.equals(node.myLeft)) {
					return false;
				}
			}
			if (myRight == null && node.myRight != null) {//rights not equal
				return false;
			}
			if (myRight != null && node.myRight == null) {
				return false;
			}
			if (myRight != null && node.myRight != null) {
				if (!myRight.equals(node.myRight)) {
					return false;
				}
			}
			return true;
		}

		/*
		 * Precondition: a correct string.
		 * 
		 * It should traverse through the expression's nodes 
		 * and return a string representing the makeup of the nodes
		 * 
		 */
		public String toString() {
			String rtn = "";
			if (myLeft != null && myRight != null && !myItem.equals("~")) { // ignore printing parens if '~' or if single variable
				rtn = "(";
			}
			if (myLeft != null) {
				rtn = rtn + myLeft.toStringHelper(); //recursive call to myLeft
			}
			rtn = rtn + myItem; 
			if (myRight != null) {
				rtn = rtn + myRight.toStringHelper(); //recursive call to myRight
			}
			if (myLeft != null && myRight != null && !myItem.equals("~")) { // ignore printing parens if '~' or if single variable
				rtn = rtn + ")";
			}
			return rtn;
		}

		public String toStringHelper() {
			if (myLeft == null && myRight == null) { //if there is no more children, just print myItem.
				return myItem;
			}
			String rtn = "";
			if (!myItem.equals("~")) { // ignore printing parens if '~'
				rtn = "(";
			}
			if (myLeft != null) {
				rtn = rtn + myLeft.toStringHelper(); //recursive call to myLeft
			}
			rtn = rtn + myItem; 
			if (myRight != null) {
				rtn = rtn + myRight.toStringHelper(); // recursive call to myRight
			}
			if (!myItem.equals("~")) { // ignore printing parens if '~'
				rtn = ")";
			}
			return rtn;
		}

	}
}	
