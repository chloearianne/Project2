import java.util.*;

public class Proof { 
	
	SubProof originalProof = null;

	public Proof (TheoremSet theorems) {
		originalProof = new SubProof(null, null, "0");
	}

	public LineNumber nextLineNumber ( ) {
		LineNumber myLine = new LineNumber();
		return myLine;
	}

	public void extendProof (String x) throws IllegalLineException, IllegalInferenceException {
		Expression myExpression = new Expression(x);
		originalProof.addChildProof(myExpression);
	}

	public String toString ( ) {
		String toReturn = "";
		for (int k = 0; k < )
		return "";
	}

	public boolean isComplete ( ) {
		 SubProof toProve = originalProof.childProofs.get(0);
		 Expression firstExpr = toProve.myExpression;
		 String firstString = firstExpr.toString();
		 SubProof lastProof = originalProof.childProofs.get(originalProof.childProofs.size() - 1);
		 Expression lastExpr = lastProof.myExpression;
		 String lastString = lastExpr.toString();
		 return lastString.equals(firstString);
		
	}
	
	private static class SubProof {

		public Expression myExpression;
		public SubProof parentProof;
		public ArrayList<SubProof> childProofs;
		public String myLineNumber;
		
		public SubProof(Expression expr, SubProof parent, String line) {
			parentProof = parent;
			childProofs = new ArrayList<SubProof>();
			myExpression = expr;
			myLineNumber = line;
		}
		
		public SubProof parent () {
			return parentProof;
		}
		
		public void addChildProof(Expression newExpression) {
			int childNumber = this.childProofs.size();
			SubProof child = new SubProof(newExpression, this, this.myLineNumber + "." + childNumber);
			childProofs.add(child);
		}
		
		public String lineNumber () {
			return myLineNumber;
		}
		
		
	}
}
	