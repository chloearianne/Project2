import static org.junit.Assert.*;

import org.junit.Test;


public class TheoremSetTest {

	@Test
	public void theoremSetTest() throws IllegalLineException {
		TheoremSet myThms = new TheoremSet();
		myThms.put("theorem1", new Expression("(p=>q)"));
		try {
		myThms.put("theorem one", new Expression("p"));
		fail("can't have a name longer than one word");
		} catch(Exception e) {
			System.out.println("This is supposed to happen");
		}
		try {
			myThms.put("print", new Expression("p"));
			fail("can't have print statement");
		} catch(Exception e) {
			System.out.println("this is supposed to happen");
		}
		try {
			myThms.put("repeat", new Expression("p"));
			fail("can't have print statement");
		} catch(Exception e) {
			System.out.println("this is supposed to happen");
		}
		try {
			myThms.put("PRINT", new Expression("p"));
			fail("can't have print statement");
		} catch(Exception e) {
			System.out.println("this is supposed to happen");
		}
		try {
			myThms.put("pr&int", new Expression("p"));
			fail("can't have special character");
		} catch(Exception e) {
			System.out.println("this is supposed to happen");
		}
		try {
			myThms.put("hello~", new Expression("p"));
			fail("can't have special character");
		} catch(Exception e) {
			System.out.println("this is supposed to happen");
		}
		try {
			myThms.put("(hello", new Expression("p"));
			fail("can't have special character");
		} catch(Exception e) {
			System.out.println("this is supposed to happen");
		}
		try {
			myThms.put("he>llo", new Expression("p"));
			fail("can't have special character");
		} catch(Exception e) {
			System.out.println("this is supposed to happen");
		}
		try {
			myThms.put(")", new Expression("p"));
			fail("can't have special character");
		} catch(Exception e) {
			System.out.println("this is supposed to happen");
		}
		try {
			myThms.put("", new Expression("p"));
			fail("can't have empty statement");
		} catch(Exception e) {
			System.out.println("this is supposed to happen");
		}
		try {
			myThms.put(null, new Expression("p"));
			fail("can't have empty statement");
		} catch(Exception e) {
			System.out.println("this is supposed to happen");
		}
	}
	
	@Test
		public void validTheoremTest() throws IllegalLineException {
		TheoremSet myThms = new TheoremSet();
		
		Expression a = null;
		try {
		myThms.put("theorem0", a);
		assertFalse(myThms.validTheorem("theorem0", null));
		} catch(Exception e) {
			System.out.println("This should happen");
		}
		
		Expression e = new Expression("p");
		assertEquals(myThms.put("theorem", e), e);
		assertTrue(myThms.hasTheorem("theorem"));
		assertFalse(myThms.hasTheorem(e.toString()));
		Expression d = new Expression("q");
		assertEquals(myThms.put("theorem2", d), d);
		assertTrue(myThms.hasTheorem("theorem2"));
		assertTrue(myThms.hasTheorem("theorem"));
		
		assertTrue(myThms.validTheorem("theorem", e));
		assertTrue(myThms.validTheorem("theorem", d)); //wrong
		
		Expression g = new Expression("((p|~p)=>q)");
		myThms.put("theorem3", g);
		assertEquals(myThms.getTheorem("theorem3"), g);
		
		assertTrue(myThms.validTheorem("theorem3", g));
		assertTrue(myThms.validTheorem("theorem3", new Expression("((p|~p)=>q)")));
		assertTrue(myThms.validTheorem("theorem3", new Expression("((q|~q)=>p)")));
		assertTrue(myThms.validTheorem("theorem3", new Expression("((a|~a)=>b)")));
		assertFalse(myThms.validTheorem("theorem3", e));
		assertFalse(myThms.validTheorem("hello", e));
		
		Expression h = new Expression("(((a=>b)=>c)=>(a=>c))");
		myThms.put("theorem4", h);
		assertEquals(myThms.getTheorem("theorem4"), h);
		assertTrue(myThms.validTheorem("theorem4", h));
		assertTrue(myThms.validTheorem("theorem4", new Expression("(((a=>b)=>c)=>(a=>c))")));
		assertFalse(myThms.validTheorem("theorem4", new Expression("(((d=>e)=>f)=>(d=>e))")));
		assertFalse(myThms.validTheorem("theorem4", new Expression("(((t=>h)=>x)=>(x=>t))")));
		assertTrue(myThms.validTheorem("theorem4", h));
		assertFalse(myThms.validTheorem("theorem3", h));
		assertFalse(myThms.validTheorem("theorem4", g));
		
	}

}
