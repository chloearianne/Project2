Terry Tsai parts
  For all the inferences that our program makes, we wrote 5 methods, one for each of the inferences (assume, mp, mt, co, ic), to handle the inferences. Each one of those methods take in three Strings (except ic, which takes in two Strings), those Strings being either the String to form a LineNumber object for that String, or to make an Expression object to place in the HashTable of proven Expressions if the inference proves that Expression. 
  
	 To test for bugs, we wrote a JUnit test class called InferenceTest.java that creates a new Proof object, then it runs through an exhaustive list of calls to the inference methods. In each of the proper calls it will assert that the method successfully adds the return string to the hashtable of proven Expressions (since each inference adds an Expression to the hashtable of proven Expressions if it is a valid inference, and throws an exception if not true), and in each of the improper calls it will assert that the method did not add the string and threw an exception instead. We also test if it correctly breaks out of the loop if we have proven the theorem. In all types of tests we test if the strings are null.
   
	For the inference class “mp,” our first test tests a very simple modus ponens (“p” and “(p=>q)” implies “q”). Then it runs through more complicated tests, testing tildes, and/or’s, and also chains of implications to make sure the equals method is traversing the nodes properly. We also test cases where the inference should not be true, testing invalid strings, inferences that don’t equal to each other, and switching the order of the arguments in a way that should cause the inference to be false.
  
	For the inference class “mt,” we also first had a simple modus tollens test, then tested more complicated tests to see if switchSign method outputs the opposite of a statement in harmony with equals together drawing the correct inferences. We also tested cases where the inference should not be true, further making sure switchSign is doing what it is supposed to be doing, testing switchSign against possible bugs like numerous parentheses, and/or statements. 
  
	For the inference class “co,” we made sure that the first string equals the opposite of the second string. We did this by testing switchSign on as many possible types of syntax forms as we can think of then testing so that the equals method would evaluate to true. We also tested cases when one string would not equal the opposite of the other string, testing strings that are equal to each other, or strings that are completely different and are not opposites.
  
	For the inference class “ic”, we made sure that this inference method should evaluate to true only if the line number’s expression that the first string is pointing to equals the right side of the return expression that the second string is pointing to. We tested cases where the inference is true, using a combination of tildes, and/or’s and implications chained with parentheses to make sure the Expression is being traversed correctly. We also tested cases where ic should fail, such as switching the nodes around or switching a node’s left and right nodes or using completely different nodes that have nothing in common.
  
	Terry Tsai was the main writer and designer of the inference methods. All other teammates helped him fix bugs and helped him figure out how to implement some of his ideas like determining how best to check if the right side of a node is equal to another node. 
