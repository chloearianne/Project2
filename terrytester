//EQUALS IS A PLACEHOLDER METHOD! REPLACE WITH SOMETHING TO TRAVERSE THE TREES TO PATTERN MATCH	
		//Use a tree to do the pattern checking
		//ex: line2.subtree matches with line1.root


public class terrytester2 {
	LineNumber currentLineNumber; //PLACEHOLDER FOR NOW UNTIL WE HAVE CURRENTLINENUMBER
	public static String switchSign(String s) {
		if (s.substring(0,1).equals("~")) {
			return s.substring(1, s.length());
		} else {
			return "~" + s;
		}
	}
	
	public void assume(Expression3 exp) throws IllegalInferenceException { //NEEDS LINENUMBER
		try {
			if (switchSign(exp.value()).equals(currentLineNumber.value) || exp.equals(currentLineNumber.valueLeft)) {
				//NEEDS TO CALL UP THE CURRENT LINE NUMBER AND SET ISPROVEN TO TRUE
				System.out.println("Assuming " + exp.value() + " is true...");
			} else {
				throw new IllegalInferenceException("bad inference");
			}
		} catch (IllegalInferenceException e) {
			System.out.println("bad inference!");
		}
	}
	
	public void mp(Expression line1, Expression line2, String rtnString) throws IllegalInferenceException, IllegalLineException {
		try {
			Expression rtn = null;
			try{
				rtn = new Expression(rtnString);
			} catch(IllegalLineException e){
				throw new IllegalLineException("hi");
			}
			System.out.println("Testing a modus ponens: Does " + line1.toString() + " and " + line2.toString() + " imply " + rtn.toString() + "?");
			if (line1.toString().length() > line2.toString().length()) { // checks if the two LineNumbers are in the right order, if not, switches them.
				Expression temp = line1;
				line1 = line2;
				line2 = temp;
			}
			System.out.print(line2.nodeLeft() + " equals ");
			System.out.println(line1.node());
			System.out.print(line2.nodeRight() + " equals ");
			System.out.println(rtn.node());
			if (line2.nodeLeft().equals(line1.node())) { //Need to write a LineNumber-specific equals method 
				if (line2.nodeRight().equals(rtn.node())) { 
					//add rtn to arraylist of proven LineNumbers
					//NEEDS TO CALL UP THE CURRENT LINE NUMBER AND SET ISPROVEN TO TRUE
					System.out.println("Result: " + rtn.value() + " is true!");
				} else {
					throw new IllegalInferenceException("bad inference");
				}
			}
			
			else {
				throw new IllegalInferenceException("bad inference");
			}
		} catch (IllegalInferenceException e) {
			System.out.println("bad inference!");
		}
	}

	public void mt(Expression line1, Expression line2, String rtnString) throws IllegalInferenceException { //says String but it should say Expression
		try {
			System.out.println("Testing a modus tollens: Does " + line1.toString() + " and " + line2.toString() + " imply " + rtn.toString() + "?");
			if (line1.value.length() > line2.value.length()) { // checks if the two LineNumbers are in the right order, if not, switches them.
				Expression temp = line1;
				line1 = line2;
				line2 = temp;
			}
			if (line2.valueRight.equals(switchSign(line1.value))) {	
				if (line2.valueLeft.equals(switchSign(rtn.value))) { 
					//add rtn to arraylist of proven LineNumbers
					//NEEDS TO CALL UP THE CURRENT LINE NUMBER AND SET ISPROVEN TO TRUE
					System.out.println("Result: " + rtn.value + " is true!");
				} else { 
					throw new IllegalInferenceException("bad inference");
				}
			}
			else {
				throw new IllegalInferenceException("bad inference");
			}
		} catch (IllegalInferenceException e) {
			System.out.println("bad inference!");
		}
	}
/*	
	public void co(LineNumber line1, LineNumber line2, Expression rtn) throws IllegalInferenceException {
		try {
			System.out.println("Testing a contradiction: Does " + line1.value + " and " + line2.value + " imply " + rtn.value + "?");
			if (line1.value.length() > line2.value.length()) { // checks if the two LineNumbers are in the right order, if not, switches them.
				LineNumber temp = line1;
				line1 = line2;
				line2 = temp;
			}
			if (line1.isProven && line2.isProven && (switchSign(line1.value)).equals(line2.value)) { //~p, p=>q, q
				if (rtn.valueLeft.equals(line1.value) || rtn.valueLeft.equals(line2.value)) { 
					//add rtn to arraylist of proven LineNumbers
					//NEEDS TO CALL UP THE CURRENT LINE NUMBER AND SET ISPROVEN TO TRUE
					System.out.println("Result: " + rtn.value + " is true!");
				} else {
					throw new IllegalInferenceException("bad inference");
				}
			}
			else {
				throw new IllegalInferenceException("bad inference");
			}
	  } catch (IllegalInferenceException e) {
		  System.out.println("bad inference!");
	  }
	}
	*/
	public void ic(Expression line1, Expression rtn) throws IllegalInferenceException {
		try {
			System.out.println("Testing an IC: Does " + line1.toString() + " imply " + rtn.toString() + "?");
			//if (line1.isProven) { //I need LineNumber for this
				if (line1.value().equals(rtn.valueRight())) { 
					//add rtn to arraylist of proven LineNumbers
					//NEEDS TO CALL UP THE CURRENT LINE NUMBER AND SET ISPROVEN TO TRUE
					System.out.println("Result: " + rtn.toString() + " is true!");
				} else {
					throw new IllegalInferenceException("bad inference");
				}
			//}
			//else {
			//	throw new IllegalInferenceException("bad inference");
			//}
		} catch (IllegalInferenceException e) {
			 System.out.println("bad inference!");
		}
	}


	public static void main(String[] args) throws IllegalInferenceException {
		terrytester2 terry = new terrytester2();
		try {
		Expression exp1 = new Expression("~~~p");
		Expression exp2 = new Expression("(~~~p=>~q)");
		Expression exp3 = new Expression("~q");
		String str1 = "~q";
		Expression exp4 = new Expression("((x=>y)=>z)");
		Expression exp5 = new Expression("(x=>y)");
		Expression exp6 = new Expression("z");
		Expression exp7 = new Expression("~(x=>(y&z))");
		Expression exp8 = new Expression("(z=>~(x=>(y&z)))");
		terry.mp(exp1, exp2, str1);
		System.out.println("");
		//terry.mp(exp4, exp5, exp6);
		System.out.println("");
		//terry.mp(exp4, exp1, exp6);
		System.out.println("");
		//terry.ic(exp7, exp8);
		} catch (IllegalLineException e) {
			System.out.println("error with lines");
		}
	}
}
