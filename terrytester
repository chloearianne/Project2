public class terrytester2 {
	LineNumber currentLineNumber; //PLACEHOLDER FOR NOW UNTIL WE HAVE CURRENTLINENUMBER
	
	public static String simplify(String s) {
		String rtn = s;
		for (int i = 0; i < rtn.length(); i++) {
			if (rtn.length() > 2) {
				if (rtn.charAt(0) == '~' && rtn.charAt(1) == '~') {
					rtn = rtn.substring(i, rtn.length());
					i = 0;
				}
				if (rtn.charAt(i) == '~' && rtn.charAt(i + 1) == '~') {
					rtn = "" + rtn.substring(0, i) + rtn.substring(i+2, rtn.length());
					i = 0;
				}
			}
		}
		return rtn;
	}
	
	public static String switchSign(String s) {
		if (s.substring(0,1).equals("~")) {
			return s.substring(1, s.length());
		} else {
			return "~" + s;
		}
	}
	
	public void assume(Expression3 exp) throws IllegalInferenceException { //NEEDS LINENUMBER
		try {
			if (switchSign(exp.value()).equals(currentLineNumber.value) || exp.equals(currentLineNumber.valueLeft)) {
				//NEEDS TO CALL UP THE CURRENT LINE NUMBER AND SET ISPROVEN TO TRUE
				System.out.println("Assuming " + exp.value() + " is true...");
			} else {
				throw new IllegalInferenceException("bad inference");
			}
		} catch (IllegalInferenceException e) {
			System.out.println("bad inference!");
		}
	}
	
	public void mp(Expression line1, Expression line2, String rtnString) throws IllegalInferenceException, IllegalLineException {
		try {
			Expression rtn = null;
			try{
				rtn = new Expression(rtnString);
			} catch(IllegalLineException e){
				throw new IllegalLineException("hi");
			}
			System.out.println("Testing a modus ponens: Does " + line1.toString() + " and " + line2.toString() + " imply " + rtn.toString() + "?");
			if (line1.toString().length() > line2.toString().length()) { // checks if the two LineNumbers are in the right order, if not, switches them.
				Expression temp = line1;
				line1 = line2;
				line2 = temp;
			}
			System.out.print(line2.nodeLeft().toString() + " equals ");
			System.out.println(line1.node().toString());
			System.out.print(line2.nodeRight().toString() + " equals ");
			System.out.println(rtn.node().toString());
			if (line2.nodeLeft().toString().equals(line1.toString())) { //Need to write a LineNumber-specific equals method 
				if (line2.nodeRight().toString().equals(rtn.toString())) { 
					//add rtn to arraylist of proven LineNumbers
					//NEEDS TO CALL UP THE CURRENT LINE NUMBER AND SET ISPROVEN TO TRUE
					System.out.println("Result: " + rtn.toString() + " is true!");
				} else {
					throw new IllegalInferenceException("bad inference");
				}
			}
			
			else {
				throw new IllegalInferenceException("bad inference");
			}
		} catch (IllegalInferenceException e) {
			System.out.println("bad inference!");
		}
	}

	public void mt(Expression line1, Expression line2, String rtnString) throws IllegalInferenceException, IllegalLineException { //says String but it should say Expression
		try {
			Expression rtn = null;
			try{
				rtn = new Expression(rtnString);
			} catch(IllegalLineException e){
				throw new IllegalLineException("hi");
			}
			System.out.println("Testing a modus tollens: Does " + line1.toString() + " and " + line2.toString() + " imply " + rtn.toString() + "?");
			if (line1.toString().length() > line2.toString().length()) { // checks if the two LineNumbers are in the right order, if not, switches them.
				Expression temp = line1;
				line1 = line2;
				line2 = temp;
			}
			System.out.println(line2.nodeRight().toString());
			System.out.println(switchSign(line1.toString()));
			System.out.println(line2.nodeLeft().toString());
			System.out.println(switchSign(rtn.toString()));
			if (line2.nodeRight().toString().equals(switchSign(line1.toString()))) {	
				if (line2.nodeLeft().toString().equals(switchSign(rtn.toString()))) { 
					//add rtn to arraylist of proven LineNumbers
					//NEEDS TO CALL UP THE CURRENT LINE NUMBER AND SET ISPROVEN TO TRUE
					System.out.println("Result: " + rtn.toString() + " is true!");
				} else { 
					throw new IllegalInferenceException("bad inference");
				}
			}
			else {
				throw new IllegalInferenceException("bad inference");
			}
		} catch (IllegalInferenceException e) {
			System.out.println("bad inference!");
		}
	}

	public void co(Expression line1, Expression line2, String rtnString) throws IllegalInferenceException, IllegalLineException {
		try {
			Expression rtn = null;
			try{
				rtn = new Expression(rtnString);
			} catch(IllegalLineException e){
				throw new IllegalLineException("hi");
			}
			System.out.println("Testing a contradiction: Does " + line1.toString() + " and " + line2.toString() + " imply " + rtn.toString() + "?");
			System.out.println(line1.toString());
			System.out.println(line2.toString());
			System.out.println(rtn.nodeLeft().toString());
			//first this needs to check if line1 and line2 are proven, can only do that with LINE NUMBER!
			if (switchSign(line1.toString()).equals(line2.toString())) { //~p, p=>q, q
				if (rtn.nodeLeft().toString().equals(line1.toString()) || rtn.nodeLeft().toString().equals(line2.toString())) { 
					//add rtn to arraylist of proven LineNumbers
					//NEEDS TO CALL UP THE CURRENT LINE NUMBER AND SET ISPROVEN TO TRUE
					System.out.println("Result: " + rtn.toString() + " is true!");
				} else {
					throw new IllegalInferenceException("bad inference");
				}
			}
			else {
				throw new IllegalInferenceException("bad inference");
			}
	  } catch (IllegalInferenceException e) {
		  System.out.println("bad inference!");
	  }
	}

	public void ic(Expression line1, String rtnString) throws IllegalInferenceException, IllegalLineException {
		try {
			Expression rtn = null;
			try{
				rtn = new Expression(rtnString);
			} catch(IllegalLineException e){
				throw new IllegalLineException("hi");
			}
			System.out.println("Testing an IC: Does " + line1.toString() + " imply " + rtn.toString() + "?");
			//first this needs to check if line1 is proven, can only do that with LINE NUMBER!
				if (line1.toString().equals(rtn.nodeRight().toString())) { 
					//add rtn to arraylist of proven LineNumbers
					//NEEDS TO CALL UP THE CURRENT LINE NUMBER AND SET ISPROVEN TO TRUE
					System.out.println("Result: " + rtn.toString() + " is true!");
				} else {
					throw new IllegalInferenceException("bad inference");
				}
			//}
			//else {
			//	throw new IllegalInferenceException("bad inference");
			//}
		} catch (IllegalInferenceException e) {
			 System.out.println("bad inference!");
		}
	}


	public static void main(String[] args) throws IllegalInferenceException {
		terrytester2 terry = new terrytester2();
		try {
		Expression exp1 = new Expression("~~~p");
		Expression exp2 = new Expression("(~~~p=>~q)");
		String str1 = "~q";
		Expression exp4 = new Expression("((x=>y)=>z)");
		Expression exp5 = new Expression("(x=>y)");
		String str2 = "z";
		Expression exp6 = new Expression("~q");
		Expression exp7 = new Expression("(p=>q)");
		String str3 = "~p";
		Expression exp8 = new Expression("c");
		Expression exp9 = new Expression("((p&~q)=>~c)");
		String str4 = "~(p&~q)";
		Expression exp10 = new Expression("a");
		Expression exp11 = new Expression("~a");
		String str5 = "(a=>b)";
		Expression exp20 = new Expression("~(x=>(y&z))");
		String str8 = "(z=>~(x=>(y&z)))";
		terry.mp(exp1, exp2, str1);
		System.out.println("");
		terry.mp(exp4, exp5, str2);
		System.out.println("");
		terry.mt(exp6, exp7, str3);
		System.out.println("");
		terry.mt(exp8, exp9, str4);
		System.out.println("");
		terry.co(exp10, exp11, str5);
		//terry.mp(exp4, exp1, exp6);
		//terry.ic(exp7, exp8);
		} catch (IllegalLineException e) {
			System.out.println("error with lines");
		}
	}
}
