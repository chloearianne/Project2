import java.util.*;

/*
	calls to mp, mt, repeat, ect. must take in strings and use try catches to see if they're valid
	must also extend the proof inside mp/mt, because if an exception isn't thrown then the reason is true
*/

public class Proof {
	private TheoremSet theorems;
	private String prevReason;
	private SubProof originalProof;
	private SubProof currentProof;
	private String previousReason;
	private Hashtable<String, LineNumber> isTrueGlobal;
	private LineNumber currentLineNum;

	// Takes in a theoremset of theorems
	// Constructs a proof by initializing all the variables to a null value
	public Proof (TheoremSet theorems) {
		originalProof = null;
		currentProof = originalProof;
		isTrueGlobal = new Hashtable<String, LineNumber>();
		this.theorems = theorems;
		previousReason = "";
		currentLineNum = null;
	}

	// set up the next line number for nextLineNumber to return at the beginning of the 
	// next step's call.
	public LineNumber nextLineNumber ( ) {
		LineNumber nextLine;
		LineNumber tempLine = currentLineNum;
		// if we're starting a new subproof, create a copy of the current line, add a ".0" for a placeholder
		// and call a new line number using that
		if (previousReason.equals("show")) {
			tempLine.myString += ".0";
			nextLine = new LineNumber(tempLine, true);
		// if we're about to exit a subproof (the current proof just finished), then create a copy of the 
		// current line, subtract the last number and its point, and call a new line number using that
		} else if (isTrueGlobal.contains(currentProof.myLineNumber)){
			tempLine.step = currentProof.myLineNumber.step;
			int tempLength = tempLine.myString.length();
			if (tempLine.step >= 10) {
				tempLine.myString = tempLine.myString.substring(0, tempLength - 3);
			} else if (tempLine.step >= 100) {
				tempLine.myString = tempLine.myString.substring(0, tempLength - 4);
			} else {
				if (tempLength > 1) {
					tempLine.myString = tempLine.myString.substring(0, tempLength - 2);
				}
			}
			nextLine = new LineNumber(tempLine, false);
		// if we're simply continuing a proof, then call a new line number on the current line.
		} else {
			nextLine = new LineNumber(currentLineNum, false);
		}
		// set the current line to be proven locally, set previousLine to this one, and set currentLine
		// to the nextLine we just created.
		currentLineNum.setIsProven(true);
		currentLineNum = nextLine;
		return currentLineNum;
	}
		
		

	/* precondition: x is the user's input, currentLineNum is the line that the user typed x on
	 * 				 creates a new scanner that parses through and separates the words based on whitespace
	 * - checks to see how many words there are, a legal number of words is from 1 to 4
	 * - checks to see which reason the user is calling, and runs the corresponding helper method
	 *   to determine if the reason is being used correctly or not and if the subsequent arguments
	 *   are valid. 
	 * postcondition: The program throws an error while trying to parse the user's input, indicating
	 * 				  invalid input or invalid inference, and this error is passed on
	 * 				- The program runs without throwing an error, and extendProof checks if the subProof
	 * 				  has been proven. If it has, isTrueGlobal is updated with the new proven subProof
	*/
	public void extendProof (String x) throws IllegalLineException, IllegalInferenceException {
		if (x == null){
			throw new IllegalLineException("Cannot input a null value");
		}
		Scanner expScanner = new Scanner(x);
		if(!expScanner.hasNext()){
			throw new IllegalLineException("Cannot input an empty string");
		}	
		
		ArrayList<String> myWords = new ArrayList<String>();
		while(expScanner.hasNext()){							//separate the arguments of the string
			myWords.add(expScanner.next());
		}
		
		//general try catch statement to handle exceptions when calling outside helper methods
		//ie. if calls to assume, repeat, mt, mc, ect. throw an exception
		try{		
			String reason = myWords.get(0);			
			if(myWords.size() == 1){				//only print statements can stand alone
				if (reason.equals("print")){
					System.out.println(this);
					return;
				} else{
					throw new IllegalLineException("A reason should be followed by at least an expression");
				}
			} else if(myWords.size() == 2){			//must be a length 2 to be a valid use of show, assume, or theorem
				if (reason.equals("show")){			//ie. only one expression follows the reason
					show(myWords.get(1));
				} else if (reason.equals("assume")){				//handles assume
					if (!prevReason.equals("show")){
						throw new IllegalLineException("An assume can only follow a show");
					} else{
						assume(myWords.get(1));
					}
				} else if (theorems.hasTheorem(reason)){			//handles theorem use
					theorem(reason, myWords.get(1));
				} else{
					throw new IllegalLineException(reason + " is not a valid theorem or has an incorrect number of arguments");
				}
			} else if (myWords.size() == 3){
				if (reason.equals("repeat")){					//handles repeat, if repeat errors, pass it on
					repeat(myWords.get(1), myWords.get(2));
				}
				else if (reason.equals("ic")){					//handles ic
					ic(myWords.get(1), myWords.get(2));
				} else{
					throw new IllegalLineException("Only repeat and ic take in 2 arguments");
				}			
			} else if(myWords.size() == 4){						//handles mp, mt, co
				if (reason.equals("mp")){
					mp(myWords.get(1), myWords.get(2), myWords.get(3));
				}
				else if (reason.equals("mt")){
					mt(myWords.get(1), myWords.get(2), myWords.get(3));
				}
				else if (reason.equals("co")){
					co(myWords.get(1), myWords.get(2), myWords.get(3));
				} else{
					throw new IllegalLineException(reason + " does not take in 3 arguments");
				}
			} else {
				throw new IllegalLineException("There can never be more than 3 arguments for a reason");
			}
			//if it hasn't thrown an exception, then the reason has been validly used
			prevReason = reason;
			currentProof.everythingSoFar.add(currentLineNum.myString + x);
			if (currentProof.isProven()){
				currentLineNum.setExp(currentProof.myExpression);
				isTrueGlobal.put(currentLineNum.toString(), currentLineNum);
			}
		} catch (IllegalLineException e){
			throw e;
		} catch (IllegalInferenceException e){
			throw e;
		}
	}
	
	/* Precondition: Takes in a string exp that should represent the expression the user is trying to show
	 * - checks to see if exp is a valid expression
	 * - sets the original proof if it hasn't been initialized yet
	 * - creates child proofs
	 * Postcondition: the currentProof is now the new show statement	
	*/
	private void show(String exp) throws IllegalInferenceException, IllegalLineException{
		Expression expression = null;
		try{
			expression = new Expression(exp);
		} catch (IllegalLineException e){
			throw e;
		}
		
		if (originalProof == null){
			originalProof = new SubProof(expression, null, currentLineNum);
			currentProof = originalProof;
		} else{
			SubProof child = new SubProof(expression, currentProof, currentLineNum);
			currentProof.addChildProof(child);
		}
	}
	
	/* Precondition: 
	*/
	private void theorem(String thm, String exp) throws IllegalInferenceException, IllegalLineException{
		Expression expression = null;
		try{
			expression = new Expression(exp);
		} catch (IllegalLineException e){
			throw e;
		}
		if (theorems.validTheorem(thm, expression)){
			currentLineNum.setExp(expression);
			currentProof.assumptions.put(currentLineNum.toString(), currentLineNum);
		} else{
			throw new IllegalInferenceException("Improper use of a theorem, variables used incorrectly");
		}
	}
	
	private void repeat(String line, String exp) throws IllegalInferenceException, IllegalLineException{
		Expression expression = null;
		try{
			expression = new Expression(exp);
		} catch(IllegalLineException e){
			throw e;
		}
		if (isTrueGlobal.contains(line)){
			if(isTrueGlobal.get(line).getExp().equals(expression)){
				currentLineNum.setExp(expression);
				currentProof.assumptions.put(currentLineNum.toString(), currentLineNum);	
			} else{
				throw new IllegalLineException("Cannot use repeat on the given expression");
			}
		}
		
		LineNumber lineNum = currentProof.assumptions.get(line);
		if(line == null){
			throw new IllegalLineException(lineNum + " is not a valid line number");
		}
	
		if(lineNum.getExp().equals(expression)){
			currentLineNum.setExp(expression);
			currentProof.assumptions.put(currentLineNum.toString(), currentLineNum);	
		} else{
			throw new IllegalLineException("Cannot use repeat on the given expression");
		}		
	throw new IllegalInferenceException("cannot access " + line + " in call to repeat");
	}
	
	

	private void assume(String exp) throws IllegalInferenceException {
		//fill
	}

	private void mp(String line1, String line2, String rtnString) throws IllegalInferenceException, IllegalLineException {
		Expression rtn = null;
		try{
			rtn = new Expression(rtnString);
		} catch(IllegalLineException e){
			throw e;
		}
		LineNumber lineNum1 = currentProof.assumptions.get(line1);
		LineNumber lineNum2 = isTrueGlobal.get(line2);
		if(lineNum1 == null){
			throw new IllegalLineException(lineNum1 + " is not a valid line number");
		} else if(lineNum2 == null){
			throw new IllegalLineException(lineNum2 + " is not a valid line number");
		}
		
		Expression line1Exp = lineNum1.getExp();
		Expression line2Exp = lineNum2.getExp();
		// checks if the two LineNumbers are in the right order, if not, switches them.
		if (line1Exp.length() > line2Exp.length()) { 
			Expression temp = line1Exp;
			line1Exp = line2Exp;
			line2Exp = temp;
		}
		if (line2Exp.myRoot.getMyLeft().equals(lineNum1.getExp())) {
			if (line2Exp.myRoot.getMyRight().equals(rtn)) { 
				currentLineNum.setExp(rtn);
				currentProof.assumptions.put(currentLineNum.toString(), currentLineNum);
			} else {
				throw new IllegalInferenceException("bad inference");
			}
		}

		else {
			throw new IllegalInferenceException("bad inference");
		}
	}
	
	private void mt(String line1, String line2, String rtnString) throws IllegalInferenceException, IllegalLineException { 
		Expression rtn = null;
		//checks for valid expression
		try{
			rtn = new Expression(rtnString);
		} catch(IllegalLineException e){
			throw e;
		}
		//checks for valid lineNumbers
		LineNumber lineNum1 = currentProof.assumptions.get(line1);
		LineNumber lineNum2 = isTrueGlobal.get(line2);
		if(lineNum1 == null){
			throw new IllegalInferenceException(lineNum1 + " is not a valid line number");
		} else if(lineNum2 == null){
			throw new IllegalInferenceException(lineNum2 + " is not a valid line number");
		}
		
		Expression line1Exp = lineNum1.getExp();
		Expression line2Exp = lineNum2.getExp();	
		
		
		// checks if the two LineNumbers are in the right order, if not, switches them.
		if (line1Exp.length() > line2Exp.length()) { 
			Expression temp = line1Exp;
			line1Exp = line2Exp;
			line2Exp = temp;
		}
		if (line2Exp.myRoot.getMyRight().equals(switchSign(line1Exp.myRoot))) {	
			if (line2Exp.myRoot.getMyLeft().equals(switchSign(rtn.myRoot))) { 
				currentLineNum.setExp(rtn);
				currentProof.assumptions.put(currentLineNum.toString(), currentLineNum);
			} else { 
				throw new IllegalInferenceException("bad inference");
			}
		}
		else {
			throw new IllegalInferenceException("bad inference");
		}
	}

	private void co(String line1, String line2, String exp) throws IllegalInferenceException, IllegalLineException {
		Expression rtn = null;
		//checks for valid expression
		try{
			rtn = new Expression(exp);
		} catch(IllegalLineException e){
			throw e;
		}
		//checks for valid lineNumbers
		LineNumber lineNum1 = currentProof.assumptions.get(line1);
		LineNumber lineNum2 = isTrueGlobal.get(line2);
		if(lineNum1 == null){
			throw new IllegalInferenceException(lineNum1 + " is not a valid line number");
		} else if(lineNum2 == null){
			throw new IllegalInferenceException(lineNum2 + " is not a valid line number");
		}
		
		Expression line1Exp = lineNum1.getExp();
		Expression line2Exp = lineNum2.getExp();	
		
		//first this needs to check if line1 and line2 are proven, can only do that with LINE NUMBER!
		if (switchSign(line1Exp.myRoot).equals(line2Exp)) { //~p, p=>q, q
			if (rtn.myRoot.getMyLeft().equals(line1Exp.myRoot) 
					|| rtn.myRoot.getMyLeft().equals(line2Exp.myRoot)) { 
				currentLineNum.setExp(rtn);
				currentProof.assumptions.put(currentLineNum.toString(), currentLineNum);
			} else {
				throw new IllegalInferenceException("bad inference");
			}
		}
		else {
			throw new IllegalInferenceException("bad inference");
		}
	}
	
	private void ic(String line1, String exp) throws IllegalInferenceException, IllegalLineException {
		Expression rtn = null;
		//checks for valid expression
		try{
			rtn = new Expression(exp);
		} catch(IllegalLineException e){
			throw e;
		}
		//checks for valid lineNumbers
		LineNumber lineNum1 = currentProof.assumptions.get(line1);
		if(lineNum1 == null){
			throw new IllegalInferenceException(lineNum1 + " is not a valid line number");
		} 		
		Expression line1Exp = lineNum1.getExp();
		
		//first this needs to check if line1 is proven, can only do that with LINE NUMBER!
			if (line1Exp.myRoot.equals(rtn.myRoot.getMyRight())) { 
				currentLineNum.setExp(rtn);
				currentProof.assumptions.put(currentLineNum.toString(), currentLineNum);
				System.out.println("Result: " + rtn.toString() + " is true!");
			} else {
				throw new IllegalInferenceException("bad inference");
			}
		//}
		//else {
		//	throw new IllegalInferenceException("bad inference");
		//}
	}	
	
	
	public String toString () {
		if (!(originalProof == null)) {
			return toStringHelper(originalProof);
		}
		return "";
	}	
	
	private String toStringHelper(SubProof pf) {
		String toReturn = "";
		toReturn = toReturn + "/n" + pf.myLineNumber + " " + pf.reason + " " + pf.myExpression.toString();
		Iterator<SubProof> iter = pf.childProofs.iterator();
		while (iter.hasNext()) {
			toStringHelper(iter.next());
		}
		return toReturn;
	}
	
	public boolean isComplete ( ) {
		int sizeOfChildren = originalProof.childProofs.size();
		// If the last step of the proof has children, then that subproof is clearly not done and it's impossible
		// for the entire proof to be done.
		if (!(originalProof.childProofs.get(sizeOfChildren - 1).childProofs == null)) {
			return false;
		}
		// Convert originalProof expression (saved in firstExpr) to a string, and convert the most recent proof step 
		// to a string and save it in lastExpr. Compare these two to see if they're the same. If they are, the proof is done.
		SubProof toProve = originalProof.childProofs.get(0);
		Expression firstExpr = toProve.myExpression;
		String firstString = firstExpr.toString();
		
		SubProof lastProof = originalProof.childProofs.get(sizeOfChildren - 1);
		Expression lastExpr = lastProof.myExpression;
		String lastString = lastExpr.toString();
		return lastString.equals(firstString) && lastProof.myLineNumber.getIsProven();
		
	}
	
	// SubProof is a child class much like Amoeba was a child class of AmoebaFamily. Each proof object has a original proof
	// that is analogous to myRoot (stored in myExpression), and an ArrayList of childProofs that is analogous to myChildren.
	// Each proof also contains its own line number, its original reason, a reference to its parent proof, and a hashtable
	// containing all of the assumptions for the proof (lines/expressions that, for this proof, are essentially proven/true).
	public static class SubProof {

		private Expression myExpression;
		private SubProof parentProof;
		private ArrayList<SubProof> childProofs;
		private LineNumber myLineNumber;
		private String reason;
		private ArrayList<String> everythingSoFar;
		
		//proof.assumptions should hold all values true for that proof, ie. includes parent's assumptions
		
		private Hashtable<String, LineNumber> assumptions;

		public SubProof(Expression expr, SubProof parent, LineNumber line) {
			parentProof = parent;
			childProofs = new ArrayList<SubProof>();
			myExpression = expr;
			myLineNumber = line;
			assumptions = new Hashtable<String, LineNumber>();
			everythingSoFar = new ArrayList<String>();
		}

		public boolean hasParent () {
			return !(this.parentProof == null);
		}

		public void addChildProof(SubProof child) {
			childProofs.add(child);
		}

		public LineNumber lineNumber () {
			return myLineNumber;
		}

		public boolean isProven() {
			return myExpression.equals(childProofs.get(childProofs.size()).myExpression);
		}
	}
}
